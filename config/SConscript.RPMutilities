## Builders, Generators and Helper Functions for building, creating and installing RPM files
#	@author Andrew W. Rose
#	@date 2012
import subprocess, os

## Import the environment from the SConstruct File
Import('env')

AddOption( '--dist' , action='store' , dest='dist' , default='' , help='generate distribution files' ) 
AddOption( '--install-rpm' , action='store' , dest='install-rpm' , default='' , help='install RPMs' ) 

	
#----------------------------------------------------------------------------------------------------------------------------------------------------------------
#----------------------------------------------------------------------------------------------------------------------------------------------------------------
def BuildFromSpecGenerator (source, target, env, for_signature ):

	cmdline = 'rpmbuild --clean -bc '

	if env.GetOption('silent'): #commandline -s, --silent or --quiet flag
		cmdline += '--quiet '	

	cmdline += '--define "_topdir ' + os.path.abspath( 'rpmbuild' ) + '" '
	cmdline += '--define "working_dir ' + os.path.abspath( '.' ) + '" '
	cmdline += os.path.abspath( str(source[0]) )
	return cmdline 

env['BUILDERS']['BuildFromSpec'] = Builder( generator=BuildFromSpecGenerator )
#----------------------------------------------------------------------------------------------------------------------------------------------------------------
#----------------------------------------------------------------------------------------------------------------------------------------------------------------




#----------------------------------------------------------------------------------------------------------------------------------------------------------------
#----------------------------------------------------------------------------------------------------------------------------------------------------------------
def CreateRpmGenerator (source, target, env, for_signature ):

	cmdline = 'rpmbuild --clean -ba '

	if env.GetOption('silent'): #commandline -s, --silent or --quiet flag
		cmdline += '--quiet '	

	cmdline += '--define "_topdir ' + os.path.abspath( 'rpmbuild' ) + '" '
	cmdline += '--define "working_dir ' + os.path.abspath( '.' ) + '" '
	cmdline += os.path.abspath( str(source[0]) )
	return cmdline 

env['BUILDERS']['CreateRPM'] = Builder( generator=CreateRpmGenerator )
#----------------------------------------------------------------------------------------------------------------------------------------------------------------
#----------------------------------------------------------------------------------------------------------------------------------------------------------------




#----------------------------------------------------------------------------------------------------------------------------------------------------------------
#----------------------------------------------------------------------------------------------------------------------------------------------------------------
def InstallRpmGenerator (source, target, env, for_signature ):
	path = os.path.abspath( env.GetOption('install-rpm') )
	cmdline = 'rpm -i -hv --relocate /usr='+path
	for i in source:
		cmdline += ' ' + str(i)
		
	return cmdline 

env['BUILDERS']['InstallRPM'] = Builder( generator=InstallRpmGenerator )
#----------------------------------------------------------------------------------------------------------------------------------------------------------------
#----------------------------------------------------------------------------------------------------------------------------------------------------------------



#----------------------------------------------------------------------------------------------------------------------------------------------------------------
#----------------------------------------------------------------------------------------------------------------------------------------------------------------
def CleanRPM( env , target ):
	for i in target:
		print "Any error message here can be ignored:"
		installed = not env.Execute( 'rpm --quiet -V '+i )
		print "Any error message here is significant:"
		if installed :
			env.Execute( 'rpm -e -v '+i )
	
	return 0	

env.AddMethod( CleanRPM , 'CleanRPM' )
#----------------------------------------------------------------------------------------------------------------------------------------------------------------
#----------------------------------------------------------------------------------------------------------------------------------------------------------------

