BUILD_HOME = $(shell cd)\..\..

include $(BUILD_HOME)\config\Makefile.win.macros

Package = uhal\log
PackagePath = $(CACTUS_RPM_ROOT)\${Package}
PackageName = cactuscore-uhal-log

Packager = Andrew Rose

PACKAGE_VER_MAJOR = 1
PACKAGE_VER_MINOR = 0
PACKAGE_VER_PATCH = 1
PACKAGE_RELEASE = 1

LIBRARY = lib\libcactus_uhal_log.dll

FRONTEND_SOURCES = $(wildcard src/common/log_inserters.*.cpp)

#BACKEND_SOURCES = $(wildcard src/common/log_backend.files.cpp)
BACKEND_SOURCES = $(wildcard src/common/log_backend.colour_terminal.cpp)

LIBRARY_SOURCES = ${FRONTEND_SOURCES} ${BACKEND_SOURCES}
LIBRARY_OBJECT_FILES = $(patsubst src/common/%.cpp,obj/%.o,${LIBRARY_SOURCES})

EXECUTABLE_SOURCES = 	src/common/generator.cxx

EXECUTABLE_OBJECT_FILES = $(patsubst src/common/%.cxx,obj/%.o,${EXECUTABLE_SOURCES})
EXECUTABLES = $(patsubst src/common/%.cxx,exe/%.exe,${EXECUTABLE_SOURCES})

LIBRARY_PATH = 	-L${EXTERN_BOOST_LIB_PREFIX}

LIBRARIES =  	-lboost_thread 


INCLUDE_PATH = 	-Iinclude  \
				-I${EXTERN_BOOST_INCLUDE_PREFIX} 

CPP_FLAGS = -g -Wall -O3 -MMD -MP -fPIC -D MAX_NUM_ARGS=32 ${INCLUDE_PATH}

LINK_LIBRARY_FLAGS = -shared -Wall -g ${LIBRARY_PATH} ${LIBRARIES}

LINK_EXECUTABLE_FLAGS = -Wall -g 

MSBUILD_DIR = ${PackagePath}\MSBUILD

.PHONY: all _all clean _cleanall build _buildall install _installall rpm _rpmall test _testall spec_update generator

default: build

clean: _cleanall
_cleanall:
	rm -rf ${MSBUILD_DIR}
	rm -rf obj
	rm -rf exe
	rm -rf lib
#These files are created by the generator which runs as part of make and so should be removed by make clean
	rm -rf src\common\log.cpp
	rm -rf include\uhal\log\log.hpp
	rm -rf include\uhal\log\log.hxx

all: _all
build: _all
buildall: _all
_all: make_dirs ${EXECUTABLES} ${LIBRARY} copy_to_build

make_dirs:
	for %%a in (exe obj lib) do if not exist %%a mkdir %%a

${EXECUTABLES}: exe/%.exe: obj/%.o ${EXECUTABLE_OBJECT_FILES} 
	g++ ${LINK_EXECUTABLE_FLAGS} $< -o $@
	.\exe\generator.exe	
	rm -rf obj\log.o

${EXECUTABLE_OBJECT_FILES}: obj/%.o : src/common/%.cxx
	g++ -c ${CPP_FLAGS}  $< -o $@

-include $(EXECUTABLE_SOURCES:.cxx=.d)

${LIBRARY}: ${LIBRARY_OBJECT_FILES}
#Make evaluates the list of files before it starts and does not pick up the existence of the file created during the ${EXECUTABLES} stage. We must, therefore, explicitly specify that it is built.
	g++ -c ${CPP_FLAGS} src\common\log.cpp -o obj\log.o
#And similarly, we must manually specify the inclusion of the object file created in the line above into the shared object file
	g++ ${LINK_LIBRARY_FLAGS} ${LIBRARY_OBJECT_FILES} obj\log.o -o $@

${LIBRARY_OBJECT_FILES}: obj/%.o : src/common/%.cpp ${INCLUDES}  
	g++ -c ${CPP_FLAGS} $< -o $@
	
-include $(LIBRARY_SOURCES:.cpp=.d)

copy_to_build:
	cp -p lib\*.so ${MSBUILD_DIR}\SOURCES\lib\.
	cp -p include\uhal\log\*.{hpp,hxx} ${MSBUILD_DIR}\SOURCES\include\uhal\log\.

