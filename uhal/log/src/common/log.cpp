
#include <uhal/log/log.hpp>

namespace uhal{

// ======================================================================================================================================================
// WARNING! This file is automatically generated! Do not modify it! Any changes will be overwritten!
// ======================================================================================================================================================

void setLogLevelTo ( const Emergency& )
{
	#ifndef LOGGING_EXCLUDE_EMERGENCY // A waste of time to change any level below this if it is going to disabled by compile-time checking anyway... 
		log_configuration::mLoggingIncludesEmergency = true;
		log_configuration::mLoggingIncludesAlert = false;
		log_configuration::mLoggingIncludesCritical = false;
		log_configuration::mLoggingIncludesError = false;
		log_configuration::mLoggingIncludesWarning = false;
		log_configuration::mLoggingIncludesNotice = false;
		log_configuration::mLoggingIncludesInfo = false;
		log_configuration::mLoggingIncludesDebug = false;
	#endif
}

const bool& LoggingIncludes ( const Emergency& )
{
	#ifndef LOGGING_EXCLUDE_EMERGENCY
		return log_configuration::mLoggingIncludesEmergency;
	#endif
	return log_configuration::mFalse;
}

void setLogLevelTo ( const Alert& )
{
	#ifndef LOGGING_EXCLUDE_EMERGENCY // A waste of time to change any level below this if it is going to disabled by compile-time checking anyway... 
		log_configuration::mLoggingIncludesEmergency = true;
	#ifndef LOGGING_EXCLUDE_ALERT // A waste of time to change any level below this if it is going to disabled by compile-time checking anyway... 
		log_configuration::mLoggingIncludesAlert = true;
		log_configuration::mLoggingIncludesCritical = false;
		log_configuration::mLoggingIncludesError = false;
		log_configuration::mLoggingIncludesWarning = false;
		log_configuration::mLoggingIncludesNotice = false;
		log_configuration::mLoggingIncludesInfo = false;
		log_configuration::mLoggingIncludesDebug = false;
	#endif
	#endif
}

const bool& LoggingIncludes ( const Alert& )
{
	#ifndef LOGGING_EXCLUDE_EMERGENCY
	#ifndef LOGGING_EXCLUDE_ALERT
		return log_configuration::mLoggingIncludesAlert;
	#endif
	#endif
	return log_configuration::mFalse;
}

void setLogLevelTo ( const Critical& )
{
	#ifndef LOGGING_EXCLUDE_EMERGENCY // A waste of time to change any level below this if it is going to disabled by compile-time checking anyway... 
		log_configuration::mLoggingIncludesEmergency = true;
	#ifndef LOGGING_EXCLUDE_ALERT // A waste of time to change any level below this if it is going to disabled by compile-time checking anyway... 
		log_configuration::mLoggingIncludesAlert = true;
	#ifndef LOGGING_EXCLUDE_CRITICAL // A waste of time to change any level below this if it is going to disabled by compile-time checking anyway... 
		log_configuration::mLoggingIncludesCritical = true;
		log_configuration::mLoggingIncludesError = false;
		log_configuration::mLoggingIncludesWarning = false;
		log_configuration::mLoggingIncludesNotice = false;
		log_configuration::mLoggingIncludesInfo = false;
		log_configuration::mLoggingIncludesDebug = false;
	#endif
	#endif
	#endif
}

const bool& LoggingIncludes ( const Critical& )
{
	#ifndef LOGGING_EXCLUDE_EMERGENCY
	#ifndef LOGGING_EXCLUDE_ALERT
	#ifndef LOGGING_EXCLUDE_CRITICAL
		return log_configuration::mLoggingIncludesCritical;
	#endif
	#endif
	#endif
	return log_configuration::mFalse;
}

void setLogLevelTo ( const Error& )
{
	#ifndef LOGGING_EXCLUDE_EMERGENCY // A waste of time to change any level below this if it is going to disabled by compile-time checking anyway... 
		log_configuration::mLoggingIncludesEmergency = true;
	#ifndef LOGGING_EXCLUDE_ALERT // A waste of time to change any level below this if it is going to disabled by compile-time checking anyway... 
		log_configuration::mLoggingIncludesAlert = true;
	#ifndef LOGGING_EXCLUDE_CRITICAL // A waste of time to change any level below this if it is going to disabled by compile-time checking anyway... 
		log_configuration::mLoggingIncludesCritical = true;
	#ifndef LOGGING_EXCLUDE_ERROR // A waste of time to change any level below this if it is going to disabled by compile-time checking anyway... 
		log_configuration::mLoggingIncludesError = true;
		log_configuration::mLoggingIncludesWarning = false;
		log_configuration::mLoggingIncludesNotice = false;
		log_configuration::mLoggingIncludesInfo = false;
		log_configuration::mLoggingIncludesDebug = false;
	#endif
	#endif
	#endif
	#endif
}

const bool& LoggingIncludes ( const Error& )
{
	#ifndef LOGGING_EXCLUDE_EMERGENCY
	#ifndef LOGGING_EXCLUDE_ALERT
	#ifndef LOGGING_EXCLUDE_CRITICAL
	#ifndef LOGGING_EXCLUDE_ERROR
		return log_configuration::mLoggingIncludesError;
	#endif
	#endif
	#endif
	#endif
	return log_configuration::mFalse;
}

void setLogLevelTo ( const Warning& )
{
	#ifndef LOGGING_EXCLUDE_EMERGENCY // A waste of time to change any level below this if it is going to disabled by compile-time checking anyway... 
		log_configuration::mLoggingIncludesEmergency = true;
	#ifndef LOGGING_EXCLUDE_ALERT // A waste of time to change any level below this if it is going to disabled by compile-time checking anyway... 
		log_configuration::mLoggingIncludesAlert = true;
	#ifndef LOGGING_EXCLUDE_CRITICAL // A waste of time to change any level below this if it is going to disabled by compile-time checking anyway... 
		log_configuration::mLoggingIncludesCritical = true;
	#ifndef LOGGING_EXCLUDE_ERROR // A waste of time to change any level below this if it is going to disabled by compile-time checking anyway... 
		log_configuration::mLoggingIncludesError = true;
	#ifndef LOGGING_EXCLUDE_WARNING // A waste of time to change any level below this if it is going to disabled by compile-time checking anyway... 
		log_configuration::mLoggingIncludesWarning = true;
		log_configuration::mLoggingIncludesNotice = false;
		log_configuration::mLoggingIncludesInfo = false;
		log_configuration::mLoggingIncludesDebug = false;
	#endif
	#endif
	#endif
	#endif
	#endif
}

const bool& LoggingIncludes ( const Warning& )
{
	#ifndef LOGGING_EXCLUDE_EMERGENCY
	#ifndef LOGGING_EXCLUDE_ALERT
	#ifndef LOGGING_EXCLUDE_CRITICAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
		return log_configuration::mLoggingIncludesWarning;
	#endif
	#endif
	#endif
	#endif
	#endif
	return log_configuration::mFalse;
}

void setLogLevelTo ( const Notice& )
{
	#ifndef LOGGING_EXCLUDE_EMERGENCY // A waste of time to change any level below this if it is going to disabled by compile-time checking anyway... 
		log_configuration::mLoggingIncludesEmergency = true;
	#ifndef LOGGING_EXCLUDE_ALERT // A waste of time to change any level below this if it is going to disabled by compile-time checking anyway... 
		log_configuration::mLoggingIncludesAlert = true;
	#ifndef LOGGING_EXCLUDE_CRITICAL // A waste of time to change any level below this if it is going to disabled by compile-time checking anyway... 
		log_configuration::mLoggingIncludesCritical = true;
	#ifndef LOGGING_EXCLUDE_ERROR // A waste of time to change any level below this if it is going to disabled by compile-time checking anyway... 
		log_configuration::mLoggingIncludesError = true;
	#ifndef LOGGING_EXCLUDE_WARNING // A waste of time to change any level below this if it is going to disabled by compile-time checking anyway... 
		log_configuration::mLoggingIncludesWarning = true;
	#ifndef LOGGING_EXCLUDE_NOTICE // A waste of time to change any level below this if it is going to disabled by compile-time checking anyway... 
		log_configuration::mLoggingIncludesNotice = true;
		log_configuration::mLoggingIncludesInfo = false;
		log_configuration::mLoggingIncludesDebug = false;
	#endif
	#endif
	#endif
	#endif
	#endif
	#endif
}

const bool& LoggingIncludes ( const Notice& )
{
	#ifndef LOGGING_EXCLUDE_EMERGENCY
	#ifndef LOGGING_EXCLUDE_ALERT
	#ifndef LOGGING_EXCLUDE_CRITICAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
	#ifndef LOGGING_EXCLUDE_NOTICE
		return log_configuration::mLoggingIncludesNotice;
	#endif
	#endif
	#endif
	#endif
	#endif
	#endif
	return log_configuration::mFalse;
}

void setLogLevelTo ( const Info& )
{
	#ifndef LOGGING_EXCLUDE_EMERGENCY // A waste of time to change any level below this if it is going to disabled by compile-time checking anyway... 
		log_configuration::mLoggingIncludesEmergency = true;
	#ifndef LOGGING_EXCLUDE_ALERT // A waste of time to change any level below this if it is going to disabled by compile-time checking anyway... 
		log_configuration::mLoggingIncludesAlert = true;
	#ifndef LOGGING_EXCLUDE_CRITICAL // A waste of time to change any level below this if it is going to disabled by compile-time checking anyway... 
		log_configuration::mLoggingIncludesCritical = true;
	#ifndef LOGGING_EXCLUDE_ERROR // A waste of time to change any level below this if it is going to disabled by compile-time checking anyway... 
		log_configuration::mLoggingIncludesError = true;
	#ifndef LOGGING_EXCLUDE_WARNING // A waste of time to change any level below this if it is going to disabled by compile-time checking anyway... 
		log_configuration::mLoggingIncludesWarning = true;
	#ifndef LOGGING_EXCLUDE_NOTICE // A waste of time to change any level below this if it is going to disabled by compile-time checking anyway... 
		log_configuration::mLoggingIncludesNotice = true;
	#ifndef LOGGING_EXCLUDE_INFO // A waste of time to change any level below this if it is going to disabled by compile-time checking anyway... 
		log_configuration::mLoggingIncludesInfo = true;
		log_configuration::mLoggingIncludesDebug = false;
	#endif
	#endif
	#endif
	#endif
	#endif
	#endif
	#endif
}

const bool& LoggingIncludes ( const Info& )
{
	#ifndef LOGGING_EXCLUDE_EMERGENCY
	#ifndef LOGGING_EXCLUDE_ALERT
	#ifndef LOGGING_EXCLUDE_CRITICAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
	#ifndef LOGGING_EXCLUDE_NOTICE
	#ifndef LOGGING_EXCLUDE_INFO
		return log_configuration::mLoggingIncludesInfo;
	#endif
	#endif
	#endif
	#endif
	#endif
	#endif
	#endif
	return log_configuration::mFalse;
}

void setLogLevelTo ( const Debug& )
{
	#ifndef LOGGING_EXCLUDE_EMERGENCY // A waste of time to change any level below this if it is going to disabled by compile-time checking anyway... 
		log_configuration::mLoggingIncludesEmergency = true;
	#ifndef LOGGING_EXCLUDE_ALERT // A waste of time to change any level below this if it is going to disabled by compile-time checking anyway... 
		log_configuration::mLoggingIncludesAlert = true;
	#ifndef LOGGING_EXCLUDE_CRITICAL // A waste of time to change any level below this if it is going to disabled by compile-time checking anyway... 
		log_configuration::mLoggingIncludesCritical = true;
	#ifndef LOGGING_EXCLUDE_ERROR // A waste of time to change any level below this if it is going to disabled by compile-time checking anyway... 
		log_configuration::mLoggingIncludesError = true;
	#ifndef LOGGING_EXCLUDE_WARNING // A waste of time to change any level below this if it is going to disabled by compile-time checking anyway... 
		log_configuration::mLoggingIncludesWarning = true;
	#ifndef LOGGING_EXCLUDE_NOTICE // A waste of time to change any level below this if it is going to disabled by compile-time checking anyway... 
		log_configuration::mLoggingIncludesNotice = true;
	#ifndef LOGGING_EXCLUDE_INFO // A waste of time to change any level below this if it is going to disabled by compile-time checking anyway... 
		log_configuration::mLoggingIncludesInfo = true;
	#ifndef LOGGING_EXCLUDE_DEBUG // A waste of time to change any level below this if it is going to disabled by compile-time checking anyway... 
		log_configuration::mLoggingIncludesDebug = true;
	#endif
	#endif
	#endif
	#endif
	#endif
	#endif
	#endif
	#endif
}

const bool& LoggingIncludes ( const Debug& )
{
	#ifndef LOGGING_EXCLUDE_EMERGENCY
	#ifndef LOGGING_EXCLUDE_ALERT
	#ifndef LOGGING_EXCLUDE_CRITICAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
	#ifndef LOGGING_EXCLUDE_NOTICE
	#ifndef LOGGING_EXCLUDE_INFO
	#ifndef LOGGING_EXCLUDE_DEBUG
		return log_configuration::mLoggingIncludesDebug;
	#endif
	#endif
	#endif
	#endif
	#endif
	#endif
	#endif
	#endif
	return log_configuration::mFalse;
}

bool log_configuration::mLoggingIncludesEmergency = true; // No #ifdefs required here since they are implemented in all the access functions.
bool log_configuration::mLoggingIncludesAlert = true; // No #ifdefs required here since they are implemented in all the access functions.
bool log_configuration::mLoggingIncludesCritical = true; // No #ifdefs required here since they are implemented in all the access functions.
bool log_configuration::mLoggingIncludesError = true; // No #ifdefs required here since they are implemented in all the access functions.
bool log_configuration::mLoggingIncludesWarning = true; // No #ifdefs required here since they are implemented in all the access functions.
bool log_configuration::mLoggingIncludesNotice = true; // No #ifdefs required here since they are implemented in all the access functions.
bool log_configuration::mLoggingIncludesInfo = true; // No #ifdefs required here since they are implemented in all the access functions.
bool log_configuration::mLoggingIncludesDebug = true; // No #ifdefs required here since they are implemented in all the access functions.

const bool log_configuration::mTrue = true;
const bool log_configuration::mFalse = false;

// ======================================================================================================================================================
// WARNING! This file is automatically generated! Do not modify it! Any changes will be overwritten!
// ======================================================================================================================================================

}

