
stages:
  - initial_report
  - build
  - test
  - final_report


variables:
  GITHUB_REPO_API_URL: "https://api.github.com/repos/ipbus/ipbus-software"
  OUTPUT_ROOT_DIR: "/eos/user/i/ipbusci/sw-gitlab-ci"
  OUTPUT_ROOT_URL: "http://www.cern.ch/ipbus/sw/ci"



github_commit_status:start:
  stage: initial_report
  image: tswilliams/ipbus-sw-dev-cc7:latest
  tags:
    - docker
  except:
    - tags
    - triggers
  when: always
  script:
    - "curl -H \"Authorization: token ${GITHUB_STATUS_TOKEN}\" --data '{\"state\" : \"pending\", \"target_url\" : \"'\"${CI_PROJECT_URL}\"'/pipelines/'\"${CI_PIPELINE_ID}\"'\", \"description\" : \"CI pipeline has started\", \"context\" : \"gitlab-ci\"}' ${GITHUB_REPO_API_URL}/statuses/${CI_BUILD_REF}"

github_commit_status:end:failure:
  stage: final_report
  image: tswilliams/ipbus-sw-dev-cc7:latest
  tags:
    - docker
  except:
    - tags
    - triggers
  when: on_failure
  script:
    - "curl -H \"Authorization: token ${GITHUB_STATUS_TOKEN}\" --data '{\"state\" : \"failure\", \"target_url\" : \"'\"${CI_PROJECT_URL}\"'/pipelines/'\"${CI_PIPELINE_ID}\"'\", \"description\" : \"Jobs have failed in CI pipeline\", \"context\" : \"gitlab-ci\"}' ${GITHUB_REPO_API_URL}/statuses/${CI_BUILD_REF}"

github_commit_status:end:success:
  stage: final_report
  image: tswilliams/ipbus-sw-dev-cc7:latest
  tags:
    - docker
  except:
    - tags
    - triggers
  when: on_success
  script:
    - "curl -H \"Authorization: token ${GITHUB_STATUS_TOKEN}\" --data '{\"state\" : \"success\", \"target_url\" : \"'\"${CI_PROJECT_URL}\"'/pipelines/'\"${CI_PIPELINE_ID}\"'\", \"description\" : \"CI pipeline completed successfully!\", \"context\" : \"gitlab-ci\"}' ${GITHUB_REPO_API_URL}/statuses/${CI_BUILD_REF}"



doxygen_job:
  stage: build
  image: tswilliams/ipbus-sw-dev-cc7:latest
  tags:
    - docker
  except:
    - triggers
  before_script:
    - sudo yum -y install graphviz
    - sudo yum -y install make krb5-workstation openssh-clients
    - sudo yum -y remove doxygen
    - curl -O https://svnweb.cern.ch/trac/cactus/export/47232/trunk/scripts/nightly/doxygen/doxygen-1.8.6.src.tar.gz
    - tar xzf doxygen-1.8.6.src.tar.gz
    - cd doxygen-1.8.6
    - ./configure --prefix /usr --docdir /usr/share/doc/doxygen-1.8.6 && make
    - sudo make MAN1DIR=share/man/man1 install
    - mkdir -p ~/.ssh  &&  cp ci/ssh_config ~/.ssh/config
    - export OUTPUT_PIPELINE_DIR=${OUTPUT_ROOT_DIR}/commits/${CI_COMMIT_TAG:-${CI_COMMIT_SHA}}/pipeline${CI_PIPELINE_ID}
    - if [ -n "${CI_COMMIT_TAG}" ]; then export OUTPUT_PIPELINE_DIR=${OUTPUT_PIPELINE_DIR/commits/tags} ; fi
  script:
    - env | grep -v PASSWORD | grep -v TOKEN
    - ./scripts/doxygen/api_uhal.sh "(${CI_COMMIT_TAG:-commit ${CI_COMMIT_SHA}})"
    - ls -al /tmp
    - echo "${KRB_PASSWORD}" | kinit ${KRB_USERNAME}@CERN.CH
    - klist
    - ssh ${KRB_USERNAME}@lxplus "mkdir -p ${OUTPUT_PIPELINE_DIR}" 
    - ssh ${KRB_USERNAME}@lxplus "ln -sfn ${OUTPUT_PIPELINE_DIR} `dirname ${OUTPUT_PIPELINE_DIR}`/latest" 
    - rsync -av /tmp/api_uhal ${KRB_USERNAME}@lxplus:${OUTPUT_PIPELINE_DIR}/
  artifacts:
    untracked: true
    when: always
    expire_in: 1 day
  allow_failure: true



build:centos7:
  stage: build
  image: tswilliams/ipbus-sw-dev-cc7:latest
  tags:
    - docker
  except:
    - triggers
  before_script:
    - sudo yum -y install boost-devel pugixml-devel
    - sudo yum -y install createrepo krb5-workstation openssh-clients
    - mkdir -p ~/.ssh  &&  cp ci/ssh_config ~/.ssh/config
    - export OUTPUT_PIPELINE_DIR=${OUTPUT_ROOT_DIR}/commits/${CI_COMMIT_TAG:-${CI_COMMIT_SHA}}/pipeline${CI_PIPELINE_ID}
    - if [ -n "${CI_COMMIT_TAG}" ]; then export OUTPUT_PIPELINE_DIR=${OUTPUT_PIPELINE_DIR/commits/tags} ; fi
  script:
    - env | grep -v PASSWORD | grep -v TOKEN
    - make -k Set=all
    - make -k Set=all rpm
    - mkdir -p cc7_rpms
    - cp `find . -iname "*.rpm"` cc7_rpms
    - cp yumgroups-centos7.xml cc7_rpms/
    - ls cc7_rpms
    - createrepo -vg yumgroups-centos7.xml cc7_rpms/
    - echo "${KRB_PASSWORD}" | kinit ${KRB_USERNAME}@CERN.CH
    - klist
    - ssh ${KRB_USERNAME}@lxplus "mkdir -p ${OUTPUT_PIPELINE_DIR}"
    - ssh ${KRB_USERNAME}@lxplus "ln -sfn ${OUTPUT_PIPELINE_DIR} `dirname ${OUTPUT_PIPELINE_DIR}`/latest" 
    - rsync -av cc7_rpms/ ${KRB_USERNAME}@lxplus:${OUTPUT_PIPELINE_DIR}/centos7_x86_64


build:slc6:
  stage: build
  image: tswilliams/ipbus-sw-dev-slc6:latest
  tags:
    - docker
  except:
    - triggers
  before_script:
    - sudo yum -y install createrepo krb5-workstation openssh-clients
    - mkdir -p ~/.ssh  &&  cp ci/ssh_config ~/.ssh/config
    - export OUTPUT_PIPELINE_DIR=${OUTPUT_ROOT_DIR}/commits/${CI_COMMIT_TAG:-${CI_COMMIT_SHA}}/pipeline${CI_PIPELINE_ID}
    - if [ -n "${CI_COMMIT_TAG}" ]; then export OUTPUT_PIPELINE_DIR=${OUTPUT_PIPELINE_DIR/commits/tags} ; fi
  script:
    - env | grep -v PASSWORD | grep -v TOKEN
    - make -k Set=all
    - make -k Set=all rpm
    - mkdir -p slc6_rpms
    - cp `find . -iname "*.rpm"` slc6_rpms
    - cp yumgroups-slc6.xml slc6_rpms/
    - ls slc6_rpms
    - createrepo -vg yumgroups-slc6.xml slc6_rpms
    - echo "${KRB_PASSWORD}" | kinit ${KRB_USERNAME}@CERN.CH
    - klist
    - ssh ${KRB_USERNAME}@lxplus "mkdir -p ${OUTPUT_PIPELINE_DIR}"
    - ssh ${KRB_USERNAME}@lxplus "ln -sfn ${OUTPUT_PIPELINE_DIR} `dirname ${OUTPUT_PIPELINE_DIR}`/latest" 
    - rsync -av slc6_rpms/ ${KRB_USERNAME}@lxplus:${OUTPUT_PIPELINE_DIR}/slc6_x86_64



.job_template: &slc6_test_job
  stage: test
  image: tswilliams/ipbus-sw-dev-slc6:latest
  except:
    - triggers
  dependencies: []
  before_script:
    - export OUTPUT_PIPELINE_URL=${OUTPUT_ROOT_URL}/commits/${CI_COMMIT_TAG:-${CI_COMMIT_SHA}}/pipeline${CI_PIPELINE_ID}
    - if [ -n "${CI_COMMIT_TAG}" ]; then export OUTPUT_PIPELINE_URL=${OUTPUT_PIPELINE_URL/commits/tags} ; fi
    - sudo cp ci/ipbus-sw-ci.repo /etc/yum.repos.d/ipbus-sw-ci.repo
    - sudo sed -i -re "s|^baseurl=.*|baseurl=${OUTPUT_PIPELINE_URL}/slc6_x86_64|g" /etc/yum.repos.d/ipbus-sw-ci.repo
    - sudo yum clean all
    - sudo yum -y groupinstall uhal
    - rpm -qa | grep cactus | sort


.job_template: &centos7_test_job
  stage: test
  image: tswilliams/ipbus-sw-test-cc7:latest
  except:
    - triggers
  dependencies: []
  before_script:
    - export OUTPUT_PIPELINE_URL=${OUTPUT_ROOT_URL}/commits/${CI_COMMIT_TAG:-${CI_COMMIT_SHA}}/pipeline${CI_PIPELINE_ID}
    - if [ -n "${CI_COMMIT_TAG}" ]; then export OUTPUT_PIPELINE_URL=${OUTPUT_PIPELINE_URL/commits/tags} ; fi
    - sudo cp ci/ipbus-sw-ci.repo /etc/yum.repos.d/ipbus-sw-ci.repo
    - sudo sed -i -re "s|^baseurl=.*|baseurl=${OUTPUT_PIPELINE_URL}/centos7_x86_64|g" /etc/yum.repos.d/ipbus-sw-ci.repo
    - sudo yum clean all
    - sudo yum -y groupinstall uhal
    - sudo yum -y install which
    - rpm -qa | grep cactus | sort


.job_template:
  script: &test_core_script
    - export PATH=/opt/cactus/bin:/opt/cactus/bin/uhal/tests:$PATH
    - export LD_LIBRARY_PATH=/opt/cactus/lib:$LD_LIBRARY_PATH
    - env | grep -v PASSWORD | grep -v TOKEN
    - uhal_test_suite.py -v -s "1.3 udp"
    - uhal_test_suite.py -v -s "1.3 tcp"
    - service controlhub stop || sudo systemctl stop controlhub
    - uhal_test_suite.py -v -s "1.3 controlhub"
    - uhal_test_suite.py -v -s "2.0 udp"
    - uhal_test_suite.py -v -s "2.0 tcp"
    - uhal_test_suite.py -v -s "2.0 controlhub - normal"
    - uhal_test_suite.py -v -s "2.0 controlhub - light packet loss"

.job_template:
  script: &test_python_script
    - export PATH=/opt/cactus/bin/uhal/tests:$PATH
    - export LD_LIBRARY_PATH=/opt/cactus/lib:$LD_LIBRARY_PATH
    - env | grep -v PASSWORD | grep -v TOKEN
    - uhal_test_suite.py -v -s pycohal

.job_template:
  script: &test_gui_script
    - sudo yum -y install wxPython numpy
    - export PATH=/opt/cactus/bin/uhal/tests:$PATH
    - export LD_LIBRARY_PATH=/opt/cactus/lib:$LD_LIBRARY_PATH
    - env | grep -v PASSWORD | grep -v TOKEN
    - uhal_test_suite.py -v -s gui

.job_template:
  script: &test_tools_script
    - export PATH=/opt/cactus/bin/uhal/tests:/opt/cactus/bin/uhal/tools:$PATH
    - export LD_LIBRARY_PATH=/opt/cactus/lib:$LD_LIBRARY_PATH
    - env | grep -v PASSWORD | grep -v TOKEN
    - uhal_test_suite.py -v -s tools



test_core:slc6:
  <<: *slc6_test_job
  tags:
    - docker
    - docker-cap-net-admin
  script: *test_core_script

test_python:slc6:
  <<: *slc6_test_job
  tags:
    - docker
  script: *test_python_script

test_gui:slc6:
  <<: *slc6_test_job
  tags:
    - docker
  script: *test_gui_script

test_tools:slc6:
  <<: *slc6_test_job
  tags:
    - docker
  script: *test_tools_script

test_controlhub:slc6:
  <<: *slc6_test_job
  tags:
    - docker
  script:
    - /sbin/service controlhub stop
    - env | grep -v PASSWORD | grep -v TOKEN
    - 'for i in `seq 1 50`; do /sbin/service controlhub start; if [ "$?" != "0" ]; then echo "ERROR IN STARTING CONTROLHUB"; fi; /sbin/service controlhub status; if [ "$?" != "0" ]; then echo "ERROR: CONTROLHUB SHOULD HAVE ALREADY STARTED"; fi; /sbin/service controlhub stop; done'



test_core:centos7:
  <<: *centos7_test_job
  tags:
    - docker-ssh
    - docker-cap-sys-admin
    - docker-cap-net-admin
  script: *test_core_script

test_python:centos7:
  <<: *centos7_test_job
  tags:
    - docker-ssh
    - docker-cap-sys-admin
  script: *test_python_script

test_gui:centos7:
  <<: *centos7_test_job
  tags:
    - docker-ssh
  script: *test_gui_script

test_tools:centos7:
  <<: *centos7_test_job
  tags:
    - docker-ssh
  script: *test_tools_script

test_controlhub:centos7:
  <<: *centos7_test_job
  tags:
    - docker-ssh
    - docker-cap-sys-admin
  script: 
    - sudo systemctl stop controlhub
    - env | grep -v PASSWORD | grep -v TOKEN
    - 'for i in `seq 1 50`; do sudo systemctl start controlhub; if [ "$?" != "0" ]; then echo "ERROR IN STARTING CONTROLHUB"; fi; systemctl status controlhub; if [ "$?" != "0" ]; then echo "ERROR: CONTROLHUB SHOULD HAVE ALREADY STARTED"; fi; sudo systemctl stop controlhub; done'
