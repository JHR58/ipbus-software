## Sconstruct file for the IPbusClient package
#	@author Andrew W. Rose
#	@date 2012
import subprocess

## Import the environment from the SConstruct File
Import('env')
localenv = env.Clone()

#----------------------------------------------------------------------------------------------------------------------------------------------------------------
# Set the attributes of the build here - these must match the values in the specs file!
#----------------------------------------------------------------------------------------------------------------------------------------------------------------
attributes = {
	'name' :'boost' ,
	'major' : 1 ,
	'minor' : 48 , 
	'bugfix' : 0 ,
	'release' : 2
}
#----------------------------------------------------------------------------------------------------------------------------------------------------------------


#----------------------------------------------------------------------------------------------------------------------------------------------------------------
# Convert the attributes to some lists of files which will be used by the various build processes
#----------------------------------------------------------------------------------------------------------------------------------------------------------------
BoostSources = [
	'rpmbuild/SPECS/%(name)s.spec' % attributes ,
	'rpmbuild/SOURCES/%(name)s_%(major)i_%(minor)i_%(bugfix)i.tar.bz2' % attributes
]
# print 'BoostSources', BoostSources

BoostRpms = [
	'%(name)s-%(major)i.%(minor)i.%(bugfix)i-%(release)i' % attributes , 
	'%(name)s-debuginfo-%(major)i.%(minor)i.%(bugfix)i-%(release)i' % attributes
]
# print 'BoostRpms', BoostRpms

# Extract the architecture that rpmbuild will produce for
Arch = subprocess.Popen([ 'rpm' , '-E' , '%{_arch}' ], stdout=subprocess.PIPE, stderr=subprocess.PIPE ).communicate()[0].strip()

BoostRpmFiles = [
	'rpmbuild/RPMS/'+Arch+'/'+BoostRpms[0]+'.'+Arch+'.rpm',
	'rpmbuild/RPMS/'+Arch+'/'+BoostRpms[1]+'.'+Arch+'.rpm',
	'rpmbuild/SRPMS/'+BoostRpms[0]+'.src.rpm'
]
# print 'BoostRpmFiles', BoostRpmFiles

BoostInstallFiles = BoostRpmFiles[0:2]
# print 'BoostInstallFiles', BoostInstallFiles

LocalTargets = [ Dir('doc') , Dir('include') , Dir('lib') ]
#----------------------------------------------------------------------------------------------------------------------------------------------------------------




#----------------------------------------------------------------------------------------------------------------------------------------------------------------
# Control the build based on commandline arguments
#----------------------------------------------------------------------------------------------------------------------------------------------------------------
if localenv.GetOption('clean'): #clean everything
	localenv.CleanRPM( BoostRpms )
	localenv.Command( BoostRpmFiles , '' , Delete( "$TARGET" ) )
#	localenv.Command( LocalTargets , '', Delete( "$TARGET" ) ) # turns out Scons does not like deleting directories, so do it manually...
	for i in LocalTargets:
		localenv.Execute( 'rm -rf '+str(i) )

		
elif localenv.GetOption('dist') == 'rpm' : #generate the RPM from the tarball/specs combo
	localenv.CreateRPM( BoostRpmFiles , BoostSources )

	
elif localenv.GetOption('install-rpm') : #install the rpm to the directory specified in commandline argument
	localenv.CleanRPM( BoostRpms )
	localenv.CreateRPM( BoostRpmFiles , BoostSources )
	localenv.InstallRPM( BoostInstallFiles )


else : #we are not cleaning, distributing or installing, so build locally from tarball
	localenv.BuildFromSpec( LocalTargets , BoostSources )
#----------------------------------------------------------------------------------------------------------------------------------------------------------------




